
# Given your birthday and the current date, calculate your age in days. 
# Account for leap days. 
#
# Assume that the birthday and current date are correct dates (and no 
# time travel). 

def isleapyear(year):
    if year%400 == 0:
        return True
    if year%100 == 0:
        return False
    if year%4 == 0:
        return True
    return False

def daysinmonth(year,month):
    if month == 1 or month == 3 or month ==5 or month == 7 \
    or month == 8 or month == 10 or month == 12:
        return 31
    else:
        if month == 2:
            if isleapyear(year):
                return 29
            return 28
        return 30


def nextDay(year, month, day):
    if day < daysinmonth(year,month):
        return year, month, day + 1
    else:
        if month == 12:
            return year + 1, 1, 1
        else:
            return year, month + 1, 1

def dateisbefore(year1,month1,day1,year2,month2,day2):
    if year1 < year2:
        return True
    if year1 == year2:
        if month1 < month2:
            return True
        if month1 == month2:
            return day1 < day2
    return False

def daysbetweendates(year1,month1,day1,year2,month2,day2):
    days = 0
    assert dateisbefore(year1,month1,day1,year2,month2,day2)
    while dateisbefore(year1,month1,day1,year2,month2,day2):
        year1,month1,day1= nextDay(year1,month1,day1)
        days +=1
    return days

def test():
    test_cases = [((2012,1,1,2012,2,28), 58),
                  ((2012,1,1,2012,3,1), 60),
                  ((2011,6,30,2012,6,30), 366),
                  ((2011,1,1,2012,8,8), 585 ),
                  ((1900,1,1,1999,12,31), 36523)]
    for(agrs,answer) in test_cases:
        result = daysbetweendates(*agrs)
        if result != answer:
            print result
            print "test with data " ,agrs, "Failed"
        else:
            print result
            print "test case passed"

test()
